{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://word-salad/./source/game/keyboard.js","webpack://word-salad/./source/game/generator.js","webpack://word-salad/./source/game/word-element.js","webpack://word-salad/./source/game/game.js","webpack://word-salad/webpack/startup"],"sourcesContent":["const keyLetters = \"abcdefghijklmnopqrstuvwxyz\"\n\nlet keyboard = null\nlet keys = {}\nlet listeners = {\n    letter: null,\n    backspace: null,\n    enter: null,\n    reset: null\n}\n\nfunction createKey(id, text, classes, clickEvent) {\n    let key = document.createElement('div')\n    keys[id] = key\n    key.innerText = text\n    if (classes != '') {\n        key.classList.add(classes)\n    }\n    key.addEventListener('click', clickEvent)\n    keyboard.appendChild(key)\n    return key\n}\n\nfunction addClassToKey(char, classname) {\n    let key = keys[char]\n    key.classList.add(classname)\n}\n\nexport function load() {\n    // Get elements\n    keyboard = document.getElementById('keyboard-wrapper')\n\n    // Generate letter keys\n    for (const k of keyLetters) {\n        createKey(k, k.toUpperCase(), '', () => listeners.letter(k))\n    }\n\n    // Create hidden key\n    createKey('hidden', '', 'hidden', null)\n\n    // Generate special keys\n    createKey('del', '←', 'backpsace', () => listeners.backspace()) //backspace\n    createKey('res', '⟲', 'reset', () => listeners.reset()) //reset\n}\n\nexport function reset() {\n    for (const i in keys) {\n        const k = keys[i]        \n        //Remove all possible classes\n        k.classList.remove('disabled')\n        k.classList.remove('offset')\n        k.classList.remove('correct')\n    }\n}\n\nexport function letterListener(listener) {\n    listeners.letter = listener\n}\n\nexport function backspaceListener(listener) {\n    listeners.backspace = listener\n}\n\nexport function resetListener(listener) {\n    listeners.reset = listener\n}\n\nexport function updateKeys(score, word) {\n\n    for (let i in score) {\n        if (score[i] == 0) {\n            addClassToKey(word[i], 'disabled')\n        }\n        else if (score[i] == 1) {\n            addClassToKey(word[i], 'offset')\n        }\n        else if (score[i] == 2) {\n            addClassToKey(word[i], 'correct')\n        }\n    }\n}","import wordlist from '../../wordlist/list.json'\n\nfunction randint(ceiling) {\n    return Math.floor( Math.random() * ceiling )\n}\n\nexport function random() {\n    return wordlist[ randint(wordlist.length) ]\n}","export default class WordElement {\n    currentWordClass = 'current'\n    correctClass = 'correct'\n    offsetClass = 'offset'\n    shadowClass = 'shadow-letter'\n    selectedLetterClass = 'rainbow'\n\n    container = null\n    letters = null\n    shadow = null\n\n    constructor(wrapper, correctLetters) {\n        this.shadow = correctLetters\n\n        if (wrapper != null) {\n            this.generate(wrapper)\n            this.addShadowAll(correctLetters)\n        }\n        \n    }\n\n    generate = (wrapper) => {\n        //Create container\n        this.container = document.createElement('div')\n        this.container.classList.add('word-line')\n        setTimeout(() => this.container.classList.add('show'), 0)\n\n        //Create letters\n        this.letters = []\n        for (let i = 0; i < 5; i++) {\n            let letter = document.createElement('div')\n            letter.classList.add('letter')\n            letter.innerText = ''\n\n            this.container.appendChild(letter)\n            this.letters.push(letter)\n        }\n\n        //Add selected effect\n        this.letters[0].classList.add(this.selectedLetterClass)\n\n        //Add to wrapper\n        wrapper.appendChild(this.container)\n    }\n\n    select = () => {\n        this.container.classList.add(this.currentWordClass)\n    }\n\n    deselect = () => {\n        this.container.classList.remove(this.currentWordClass)\n    }\n\n    addLetter = (letter, index, rollSelect=true) => {\n        let l = this.letters[index]\n        l.innerText = letter.toUpperCase()\n        l.classList.remove(this.shadowClass)\n\n        if (rollSelect) {\n            l.classList.remove(this.selectedLetterClass)        \n            if (index < 4) {\n                this.letters[index+1].classList.add(this.selectedLetterClass)\n            }\n        }\n    }\n\n    removeLetter = (index, rollSelect=true) => {\n        if (this.shadow[index] == ' ') {\n            this.letters[index].innerText = ''\n        }\n        else {\n            this.addShadow(index)\n        }\n        \n        if (rollSelect && index > 0) {\n            this.letters[index+1].classList.remove(this.selectedLetterClass)\n            this.letters[index].classList.add(this.selectedLetterClass)\n        }\n    }\n\n    setColors = (score) => {\n        for (let i in this.letters)\n        {\n            if (score[i] == 1) {\n                this.letters[i].classList.add(this.offsetClass)\n            }\n            else if (score[i] == 2) {\n                this.letters[i].classList.add(this.correctClass)\n            }\n        }\n    }\n\n    addShadow = (index) => {\n        this.addLetter(this.shadow[index], index, false)\n        this.letters[index].classList.add(this.shadowClass)\n    }\n\n    addShadowAll = () => {\n        for (let i in this.shadow) {\n            if (this.shadow[i] != ' ') {\n                this.addShadow(i)\n            }\n        }\n    }\n\n    delete = () => {\n        for (let l of this.letters) {\n            l.remove()\n        }\n        this.container.remove()\n        delete this\n    }\n}","import * as keyboard from './keyboard'\nimport * as generator from './generator'\nimport WordElement from './word-element'\n\n\n// Define variables\nlet guessesWrapper = null\nlet wordElements = []\nlet cursor = {\n    word: 0,\n    letter: 0\n}\nlet currentWord = [ ' ', ' ', ' ', ' ', ' ' ]\nlet correctLetters = [ ' ', ' ', ' ', ' ', ' ' ]\nlet targetWord = ''\n\n\n// Loading\n\nexport function load() {\n    guessesWrapper = document.getElementById('guess-wrapper')\n    reset(true)\n}\n\nfunction reset(first) {\n    // Reset correct letters\n    correctLetters = [ ' ', ' ', ' ', ' ', ' ' ]\n    // Generate new word\n    targetWord = generator.random()\n    // If not first game\n    if (!first) {\n        // Reset word fields\n        for (let e of wordElements) {\n            e.delete()\n        }\n        // Reset cursor\n        cursor.word = 0\n        cursor.letter = 0\n        // Reset current word letters\n        currentWord = [ ' ', ' ', ' ', ' ', ' ' ]\n        correctLetters = [ ' ', ' ', ' ', ' ', ' ' ]\n        // Reset keyboard\n        keyboard.reset()\n    }\n\n    // Create word fields\n    createWord()\n}\n\n// Events\n\nfunction onLetterClick(letter, button) {\n    if (cursor.letter < 5) {\n        wordElements[cursor.word].addLetter(letter, cursor.letter)        \n        currentWord[cursor.letter] = letter\n        cursor.letter++\n    }\n    if (cursor.letter == 5) {\n        checkResult()\n    }\n}\n\nfunction onBackspaceClick() {\n    if (cursor.letter > 0) {\n        cursor.letter--\n        wordElements[cursor.word].removeLetter(cursor.letter)\n        currentWord[cursor.letter] = ' '\n    }\n}\n\nfunction onResetClick() {\n    reset(false)\n}\n\n// Methods\n\nfunction createWord() {\n    let index = wordElements.length\n    wordElements.push( new WordElement(guessesWrapper, correctLetters) )\n    wordElements[index].select()\n\n    cursor.word = index\n    cursor.letter = 0\n    currentWord = [ ' ', ' ', ' ', ' ', ' ' ]\n}\n\nfunction fixCorrectLetters(score)\n{\n    for (let i in score) {\n        if (score[i] == 2) {\n            correctLetters[i] = currentWord[i]\n        }\n    }\n}\n\nfunction checkResult() {\n    if (currentWord.join('') == targetWord)\n        return wictory()\n\n    let score = calculateCurrentScore()\n\n    // Update guess colors\n    wordElements[cursor.word].setColors(score)\n\n    // Disable keyboard keys\n    keyboard.updateKeys(score, currentWord)\n\n    // Fix correct letters\n    fixCorrectLetters(score)\n\n    createWord()\n}\n\nfunction calculateCurrentScore() {\n    let score = [ 0, 0, 0, 0, 0 ]\n\n    //Check offset splacements\n    for (let i in currentWord) {\n        if (targetWord.indexOf(currentWord[i]) > -1) {\n            score[i] = 1\n        }\n    }\n\n    //Check correct placements\n    for (let i in currentWord) {\n        if (currentWord[i] == targetWord[i]) {\n            score[i] = 2\n        }\n    }\n\n    return score\n}\n\nfunction wictory() {\n    // Color last row correct\n    wordElements[cursor.word].setColors([2,2,2,2,2])\n}\n\n\n\n\n// Load keyboard\nkeyboard.load()\nkeyboard.letterListener(onLetterClick)\nkeyboard.backspaceListener(onBackspaceClick)\nkeyboard.resetListener(onResetClick)","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[922]();\n"],"names":["let","keyboard","keys","listeners","letter","backspace","enter","reset","createKey","id","text","classes","clickEvent","key","document","createElement","innerText","classList","add","addEventListener","appendChild","addClassToKey","char","classname","random","ceiling","Math","floor","WordElement","currentWordClass","correctClass","offsetClass","shadowClass","selectedLetterClass","container","letters","shadow","constructor","wrapper","correctLetters","this","generate","addShadowAll","setTimeout","i","push","select","deselect","remove","addLetter","index","rollSelect","l","toUpperCase","removeLetter","addShadow","setColors","score","delete","guessesWrapper","wordElements","cursor","word","currentWord","targetWord","first","e","k","createWord","length","listener","getElementById","button","join","indexOf","calculateCurrentScore","fixCorrectLetters","checkResult","__webpack_modules__"],"sourceRoot":""}